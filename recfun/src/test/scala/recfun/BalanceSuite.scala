package recfun

import org.scalatest.FunSuite

import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner

@RunWith(classOf[JUnitRunner])
class BalanceSuite extends FunSuite {
  import Main.balance

  test("balance: '(if (zero? x) max (/ 1 x))' is balanced") {
    assert(balance("(if (zero? x) max (/ 1 x))".toList))
  }

  test("balance: 'I told him ...' is balanced") {
    assert(balance("I told him (that it's not (yet) done).\n(But he wasn't listening)".toList))
  }

  test("balance: ':-)' is unbalanced") {
    assert(!balance(":-)".toList))
  }

  test("balance: counting is not enough") {
    assert(!balance("())(".toList))
  }
  
  test("all"){
    assert(balance("".toList) == true)
assert(balance("(".toList) == false)
assert(balance(")".toList) == false)
assert(balance("x".toList) == true)
assert(balance("((".toList) == false)
assert(balance(")(".toList) == false)
assert(balance("x(".toList) == false)
assert(balance("()".toList) == true)
assert(balance("))".toList) == false)
assert(balance("x)".toList) == false)
assert(balance("(x".toList) == false)
assert(balance(")x".toList) == false)
assert(balance("xx".toList) == true)
assert(balance("(((".toList) == false)
assert(balance(")((".toList) == false)
assert(balance("x((".toList) == false)
assert(balance("()(".toList) == false)
assert(balance("))(".toList) == false)
assert(balance("x)(".toList) == false)
assert(balance("(x(".toList) == false)
assert(balance(")x(".toList) == false)
assert(balance("xx(".toList) == false)
assert(balance("(()".toList) == false)
assert(balance(")()".toList) == false)
assert(balance("x()".toList) == true)
assert(balance("())".toList) == false)
assert(balance(")))".toList) == false)
assert(balance("x))".toList) == false)
assert(balance("(x)".toList) == true)
assert(balance(")x)".toList) == false)
assert(balance("xx)".toList) == false)
assert(balance("((x".toList) == false)
assert(balance(")(x".toList) == false)
assert(balance("x(x".toList) == false)
assert(balance("()x".toList) == true)
assert(balance("))x".toList) == false)
assert(balance("x)x".toList) == false)
assert(balance("(xx".toList) == false)
assert(balance(")xx".toList) == false)
assert(balance("xxx".toList) == true)
assert(balance("((((".toList) == false)
assert(balance(")(((".toList) == false)
assert(balance("x(((".toList) == false)
assert(balance("()((".toList) == false)
assert(balance("))((".toList) == false)
assert(balance("x)((".toList) == false)
assert(balance("(x((".toList) == false)
assert(balance(")x((".toList) == false)
assert(balance("xx((".toList) == false)
assert(balance("(()(".toList) == false)
assert(balance(")()(".toList) == false)
assert(balance("x()(".toList) == false)
assert(balance("())(".toList) == false)
assert(balance(")))(".toList) == false)
assert(balance("x))(".toList) == false)
assert(balance("(x)(".toList) == false)
assert(balance(")x)(".toList) == false)
assert(balance("xx)(".toList) == false)
assert(balance("((x(".toList) == false)
assert(balance(")(x(".toList) == false)
assert(balance("x(x(".toList) == false)
assert(balance("()x(".toList) == false)
assert(balance("))x(".toList) == false)
assert(balance("x)x(".toList) == false)
assert(balance("(xx(".toList) == false)
assert(balance(")xx(".toList) == false)
assert(balance("xxx(".toList) == false)
assert(balance("((()".toList) == false)
assert(balance(")(()".toList) == false)
assert(balance("x(()".toList) == false)
assert(balance("()()".toList) == true)
assert(balance("))()".toList) == false)
assert(balance("x)()".toList) == false)
assert(balance("(x()".toList) == false)
assert(balance(")x()".toList) == false)
assert(balance("xx()".toList) == true)
assert(balance("(())".toList) == true)
assert(balance(")())".toList) == false)
assert(balance("x())".toList) == false)
assert(balance("()))".toList) == false)
assert(balance("))))".toList) == false)
assert(balance("x)))".toList) == false)
assert(balance("(x))".toList) == false)
assert(balance(")x))".toList) == false)
assert(balance("xx))".toList) == false)
assert(balance("((x)".toList) == false)
assert(balance(")(x)".toList) == false)
assert(balance("x(x)".toList) == true)
assert(balance("()x)".toList) == false)
assert(balance("))x)".toList) == false)
assert(balance("x)x)".toList) == false)
assert(balance("(xx)".toList) == true)
assert(balance(")xx)".toList) == false)
assert(balance("xxx)".toList) == false)
assert(balance("(((x".toList) == false)
assert(balance(")((x".toList) == false)
assert(balance("x((x".toList) == false)
assert(balance("()(x".toList) == false)
assert(balance("))(x".toList) == false)
assert(balance("x)(x".toList) == false)
assert(balance("(x(x".toList) == false)
assert(balance(")x(x".toList) == false)
assert(balance("xx(x".toList) == false)
assert(balance("(()x".toList) == false)
assert(balance(")()x".toList) == false)
assert(balance("x()x".toList) == true)
assert(balance("())x".toList) == false)
assert(balance(")))x".toList) == false)
assert(balance("x))x".toList) == false)
assert(balance("(x)x".toList) == true)
assert(balance(")x)x".toList) == false)
assert(balance("xx)x".toList) == false)
assert(balance("((xx".toList) == false)
assert(balance(")(xx".toList) == false)
assert(balance("x(xx".toList) == false)
assert(balance("()xx".toList) == true)
assert(balance("))xx".toList) == false)
assert(balance("x)xx".toList) == false)
assert(balance("(xxx".toList) == false)
assert(balance(")xxx".toList) == false)
assert(balance("xxxx".toList) == true)
  }
  
}
